<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans         
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd        
      http://www.springframework.org/schema/aop         
      http://www.springframework.org/schema/aop/spring-aop-4.0.xsd        
      http://www.springframework.org/schema/context         
      http://www.springframework.org/schema/context/spring-context-4.0.xsd        
      http://www.springframework.org/schema/tx         
      http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
      http://www.springframework.org/schema/cache 
      http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">
	<!-- <bean id="..." class="..."> collaborators and configuration for this 
		bean go here </bean> <bean id="..." class="..."> collaborators and configuration 
		for this bean go here </bean> more bean definitions go here -->

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/desserthouse?autoReconnect=true&amp;userUnicode=true&amp;characterEncoding=utf8"/>
		<property name="username" value="root" />
		<property name="password" value="okamiji" />
	</bean>

	<!-- 配置sessionFactory -->

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="edu.nju.desserthouse.model" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.connection.autocommit">true</prop>
			</props>
		</property>

	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="RegisterAction" class="edu.nju.desserthouse.action.RegisterAction">
	</bean>
	<bean id="TopupAction" class="edu.nju.desserthouse.action.TopupAction">
	</bean>
	<bean id="LoginAction" class="edu.nju.desserthouse.action.LoginAction">
	</bean>
	<bean id="GoodsAction" class="edu.nju.desserthouse.action.GoodsAction">
	</bean>
	
	<!-- 定义 Autowired 自动注入 bean -->
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	
	<!-- 定义时间机制 --> 
	<bean id="simpleJobDetail"
    	class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<property name="targetObject">
    		 <!-- 要执行的类 -->
      		<bean class="edu.nju.desserthouse.task.UserTask" />
    	</property>
    	 <!-- 要执行的方法  --> 
    	<property name="targetMethod" value="pauseTask" />
    	 <!-- 是否马上执行 -->
    	<property name="concurrent" value="true" />
 	</bean>
  	
  	<bean id="cronTrigger"
    	class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    	<property name="jobDetail" ref="simpleJobDetail" />
    	<property name="cronExpression" value="*/5 * * * * ?" />
  	</bean> 
  	
  	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    	<property name="jobDetails">
      		<list>
        		<ref bean="simpleJobDetail" />
      		</list>
    	</property>

    	<property name="triggers">
      		<list>
        		<ref bean="cronTrigger" />
      		</list>
    	</property>
  	</bean>
  
  	<!-- Declaration of HibernateInterceptor -->
    <bean id="hibernateInterceptor" class="org.springframework.orm.hibernate3.HibernateInterceptor">
         <property name="sessionFactory">
           	<ref bean="sessionFactory"/>
         </property>
    </bean> 
    
    <!-- Manager template  -->
    <bean id="txProxyTemplate" abstract="true"
        class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributes">
            <props>
                <prop key="save*">PROPAGATION_REQUIRED</prop>
                <prop key="remove*">PROPAGATION_REQUIRED</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>                
                <prop key="create*">PROPAGATION_REQUIRED</prop>   
                <prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
            </props>
        </property>
        <property name="preInterceptors">
            <list>
             	<ref bean="hibernateInterceptor"/>
            </list>
        </property>                        
    </bean>
    
    <!-- Sample Manager that encapsulates business logic
    <bean id="txProxy" parent="txProxyTemplate">
        <property name="target">
            <bean class="edu.nju.desserthouse.service.impl.UserManageServiceImpl"/>
        </property>
    </bean> -->

	<!-- 扫描有注解的文件 base-package 包路径 -->
	<context:component-scan base-package="edu.nju.desserthouse" />
	<!-- 声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*User" propagation="REQUIRED" />
			<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 定义切面，在edu.nju.desserthouse.service包及子包中所有以Service结尾的方法中,执行有关的hibernate session的事务操作 -->
	<aop:config>
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="serviceOperation"
			expression="execution( * edu.nju.desserthouse.service..*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>
</beans>